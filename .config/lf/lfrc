# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set period 1
set cleaner '~/.config/lf/cleaner'
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xl"
set previewer '~/.config/lf/scope'
set sortby name

# cmds/functions
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	#application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*|application/javascript|application/json|inode/x-empty) $EDITOR $fx;;
	application/vnd.openxmlformats-officedocument.*|application/vnd.oasis.opendocument.*) setsid -f libreoffice $fx >/dev/null 2>&1 ;;

	#application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.wordprocessingml.document) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	#image/svg+xml) display -- $f ;;
	image/*) file_list=$(find "$PWD" -maxdepth 1 -type f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\|\.~[[:digit:]]\+~\)*$");
		index="$(echo "$file_list" | grep -Fxn "$fx" | cut -d ":" -f 1)";
		#echo "$PWD"
		#echo "$file_list"
		#echo "$fx"
		#echo "$f"
		echo "$file_list" | setsid -f nsxiv -n "$index" -aio 2>/dev/null | while read -r file; do
			[ -z "$file" ] && continue
			lf -remote "send select \"$file\""
			lf -remote "send toggle"
		done &
		;;
	video/*) echo "$fx" | setsid -f mpv --no-terminal --profile=pseudo-gui --playlist=- >/dev/null 2>&1 ;;
	#image/*) setsid -f nsxiv "$fx" ;;
	#audio/*) setsid -f mpv --audio-display=embedded-first --cover-art-file="$(tail -6 ~/.mylog | head -5 | shuf -n 1)" $fx >/dev/null 2>&1 ;;
	audio/*) setsid -f mpv --profile=pseudo-gui $fx >/dev/null 2>&1 ;;
	#application/pdf|application/vnd*|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) setsid -f $EDITOR $fx ;;
        #:w*) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

#cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

#cmd extract ${{
#	clear; tput cup $(($(tput lines)/3)); tput bold
#	set -f
#	printf "%s\n\t" "$fx"
#	printf "extract?[y/N]"
#	read ans
#	[ $ans = "y" ] && aunpack $fx
#}}

cmd delete ${{
	#clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	#[ $ans = "y" ] && rm -rf -- $fx
	foldername="$(date +%Y-%m-%d_%H:%M:%S_%N)"
	mkdir "$HOME/.trash/$foldername"
	[ $ans = "y" ] && mv -b $fx "$HOME/.trash/$foldername/"
}}

cmd sudodelete ${{
	#clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "SUDOdelete?[y/N]"
	read ans
	#[ $ans = "y" ] && rm -rf -- $fx
	foldername="$(date +%Y-%m-%d_%H:%M:%S_%N)"
	mkdir "$HOME/.trash/$foldername"
	[ $ans = "y" ] && sudo -A mv "$fx" "$HOME/.trash/$foldername/"
	#[ $ans = "y" ] && sudo -A mv $fx ~/.trash/
}}

cmd asciiArt ${{
	set -f
	printf ""
	jp2a "$fx"
	read ans
}}

cmd extract ${{
	#clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && {
	case $fx in
	      *.tar.bz2)   tar xjf $fx     ;;
	      *.tar.gz)    tar xzf $fx     ;;
	      *.bz2)       bunzip2 $fx     ;;
	      *.rar)       unrar e $fx     ;;
	      *.gz)        gunzip $fx      ;;
	      *.tar)       tar xf $fx      ;;
	      *.tbz2)      tar xjf $fx     ;;
	      *.tgz)       tar xzf $fx     ;;
	      *.zip)       unzip $fx       ;;
	      *.Z)         uncompress $fx  ;;
	       *.7z)        7z x $fx        ;;
	       *.tar.xz)    tar xf $fx      ;;
	       esac
	}
}}
#cmd moveto ${{
#	clear; tput cup $(($(tput lines)/3)); tput bold
#	set -f
#	clear; echo "Move to where?"
#	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
#	for x in $fx; do
#		eval mv -iv \"$x\" \"$dest\"
#	done &&
#	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
#}}
#
#cmd copyto ${{
#	clear; tput cup $(($(tput lines)/3)); tput bold
#	set -f
#	clear; echo "Copy to where?"
#	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
#	for x in $fx; do
#		eval cp -ivr \"$x\" \"$dest\"
#	done &&
#	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
#}}
#
#cmd setbg "$1"
#cmd bulkrename $vidir

cmd nsxiv_list ${{
	echo "$fx" | setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
		[ -z "$file" ] && continue
		lf -remote "send select \"$file\""
		lf -remote "send toggle"
	done &
}}

# Bindings
map <c-f> $lf -remote "send $id select \"$(fzf)\""

for changing directory to bm-dirs
#map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map gg top
map E extract

map DD delete
map D<c-d> sudodelete

map <c-n> push :mkdir<space>

map <c-r> reload
map <c-s> set hidden!
map <enter> shell
map x $$f
map X !$f
#map o &mimeopen $f
#map O $mimeopen --ask $f
#map E $(echo "$fx")

map <c-e> $(exiftool "$fx" | fzf)

#map S ehco "$fx"
# | nsxiv -ia )

map sn set sortby name
map sN set sortby natural

map A :rename; cmd-end # at the very end

map C push A<c-u> # new rename

map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extension


#map B bulkrename
#map b $setbg $f

#map <c-e> down
#map <c-y> up
map V $(st -e $EDITOR $fx &)

map U $printf "%s" "$fx" | clip
map u $printf "%s" "$fx" | sed 's/.*\///' | clip
map <c-S> $(setsid -f sent $fx &)

map S nsxiv_list

map <c-v> $(setsid -f vlc $fx &)

map W $setsid -f $TERMINAL >/dev/null 2>&1

#map Y $printf "%s" "$fx" | xclip -selection clipboard

# Source Bookmarks
#source "~/.config/lf/shortcutrc"

map <enter> shell
map L $(setsid -f libreoffice $fx)
map <c-t> $(newTerminal)
map <c-g> $(gimp $fx)
